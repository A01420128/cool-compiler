# Generated from antlr/Cool.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0161\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\4>\t>\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3")
        buf.write("\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13\3")
        buf.write("\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20")
        buf.write("\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3")
        buf.write("#\3#\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\7(\u0106\n(\f(\16(\u0109\13(\3)\3)\7")
        buf.write(")\u010d\n)\f)\16)\u0110\13)\3*\6*\u0113\n*\r*\16*\u0114")
        buf.write("\3+\3+\7+\u0119\n+\f+\16+\u011c\13+\3+\3+\3,\6,\u0121")
        buf.write("\n,\r,\16,\u0122\3,\3,\3-\3-\3-\3-\7-\u012b\n-\f-\16-")
        buf.write("\u012e\13-\3-\3-\3-\3-\3-\3.\3.\3.\3.\7.\u0139\n.\f.\16")
        buf.write(".\u013c\13.\3.\3.\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62")
        buf.write("\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67")
        buf.write("\38\38\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\5\u011a\u012c")
        buf.write("\u013a\2?\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\2_\2a\2c\2e\2g\2i\2k\2m\2o\2")
        buf.write("q\2s\2u\2w\2y\2{\2\3\2\27\3\2C\\\6\2\62;C\\aac|\3\2c|")
        buf.write("\3\2\62;\5\2\13\f\16\17\"\"\4\2CCcc\4\2EEee\4\2NNnn\4")
        buf.write("\2UUuu\4\2GGgg\4\2HHhh\4\2KKkk\4\2PPpp\4\2JJjj\4\2TTt")
        buf.write("t\4\2VVvv\4\2XXxx\4\2QQqq\4\2FFff\4\2RRrr\4\2YYyy\2\u0157")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\3}\3\2")
        buf.write("\2\2\5\177\3\2\2\2\7\u0081\3\2\2\2\t\u0083\3\2\2\2\13")
        buf.write("\u0085\3\2\2\2\r\u0087\3\2\2\2\17\u0089\3\2\2\2\21\u008b")
        buf.write("\3\2\2\2\23\u008e\3\2\2\2\25\u0090\3\2\2\2\27\u0092\3")
        buf.write("\2\2\2\31\u0095\3\2\2\2\33\u0097\3\2\2\2\35\u0099\3\2")
        buf.write("\2\2\37\u009b\3\2\2\2!\u009d\3\2\2\2#\u009f\3\2\2\2%\u00a1")
        buf.write("\3\2\2\2\'\u00a4\3\2\2\2)\u00a6\3\2\2\2+\u00ac\3\2\2\2")
        buf.write("-\u00b1\3\2\2\2/\u00b4\3\2\2\2\61\u00b7\3\2\2\2\63\u00ba")
        buf.write("\3\2\2\2\65\u00c3\3\2\2\2\67\u00ca\3\2\2\29\u00ce\3\2")
        buf.write("\2\2;\u00d3\3\2\2\2=\u00d8\3\2\2\2?\u00dd\3\2\2\2A\u00e3")
        buf.write("\3\2\2\2C\u00e8\3\2\2\2E\u00ed\3\2\2\2G\u00f1\3\2\2\2")
        buf.write("I\u00f4\3\2\2\2K\u00f8\3\2\2\2M\u00fd\3\2\2\2O\u0103\3")
        buf.write("\2\2\2Q\u010a\3\2\2\2S\u0112\3\2\2\2U\u0116\3\2\2\2W\u0120")
        buf.write("\3\2\2\2Y\u0126\3\2\2\2[\u0134\3\2\2\2]\u0141\3\2\2\2")
        buf.write("_\u0143\3\2\2\2a\u0145\3\2\2\2c\u0147\3\2\2\2e\u0149\3")
        buf.write("\2\2\2g\u014b\3\2\2\2i\u014d\3\2\2\2k\u014f\3\2\2\2m\u0151")
        buf.write("\3\2\2\2o\u0153\3\2\2\2q\u0155\3\2\2\2s\u0157\3\2\2\2")
        buf.write("u\u0159\3\2\2\2w\u015b\3\2\2\2y\u015d\3\2\2\2{\u015f\3")
        buf.write("\2\2\2}~\7=\2\2~\4\3\2\2\2\177\u0080\7}\2\2\u0080\6\3")
        buf.write("\2\2\2\u0081\u0082\7\177\2\2\u0082\b\3\2\2\2\u0083\u0084")
        buf.write("\7*\2\2\u0084\n\3\2\2\2\u0085\u0086\7.\2\2\u0086\f\3\2")
        buf.write("\2\2\u0087\u0088\7+\2\2\u0088\16\3\2\2\2\u0089\u008a\7")
        buf.write("<\2\2\u008a\20\3\2\2\2\u008b\u008c\7>\2\2\u008c\u008d")
        buf.write("\7/\2\2\u008d\22\3\2\2\2\u008e\u008f\7B\2\2\u008f\24\3")
        buf.write("\2\2\2\u0090\u0091\7\60\2\2\u0091\26\3\2\2\2\u0092\u0093")
        buf.write("\7?\2\2\u0093\u0094\7@\2\2\u0094\30\3\2\2\2\u0095\u0096")
        buf.write("\7-\2\2\u0096\32\3\2\2\2\u0097\u0098\7/\2\2\u0098\34\3")
        buf.write("\2\2\2\u0099\u009a\7,\2\2\u009a\36\3\2\2\2\u009b\u009c")
        buf.write("\7\61\2\2\u009c \3\2\2\2\u009d\u009e\7\u0080\2\2\u009e")
        buf.write("\"\3\2\2\2\u009f\u00a0\7>\2\2\u00a0$\3\2\2\2\u00a1\u00a2")
        buf.write("\7>\2\2\u00a2\u00a3\7?\2\2\u00a3&\3\2\2\2\u00a4\u00a5")
        buf.write("\7?\2\2\u00a5(\3\2\2\2\u00a6\u00a7\5_\60\2\u00a7\u00a8")
        buf.write("\5a\61\2\u00a8\u00a9\5]/\2\u00a9\u00aa\5c\62\2\u00aa\u00ab")
        buf.write("\5c\62\2\u00ab*\3\2\2\2\u00ac\u00ad\5e\63\2\u00ad\u00ae")
        buf.write("\5a\61\2\u00ae\u00af\5c\62\2\u00af\u00b0\5e\63\2\u00b0")
        buf.write(",\3\2\2\2\u00b1\u00b2\5g\64\2\u00b2\u00b3\5i\65\2\u00b3")
        buf.write(".\3\2\2\2\u00b4\u00b5\5i\65\2\u00b5\u00b6\5g\64\2\u00b6")
        buf.write("\60\3\2\2\2\u00b7\u00b8\5i\65\2\u00b8\u00b9\5k\66\2\u00b9")
        buf.write("\62\3\2\2\2\u00ba\u00bb\5i\65\2\u00bb\u00bc\5k\66\2\u00bc")
        buf.write("\u00bd\5m\67\2\u00bd\u00be\5e\63\2\u00be\u00bf\5o8\2\u00bf")
        buf.write("\u00c0\5i\65\2\u00c0\u00c1\5q9\2\u00c1\u00c2\5c\62\2\u00c2")
        buf.write("\64\3\2\2\2\u00c3\u00c4\5i\65\2\u00c4\u00c5\5c\62\2\u00c5")
        buf.write("\u00c6\5s:\2\u00c6\u00c7\5u;\2\u00c7\u00c8\5i\65\2\u00c8")
        buf.write("\u00c9\5w<\2\u00c9\66\3\2\2\2\u00ca\u00cb\5a\61\2\u00cb")
        buf.write("\u00cc\5e\63\2\u00cc\u00cd\5q9\2\u00cd8\3\2\2\2\u00ce")
        buf.write("\u00cf\5a\61\2\u00cf\u00d0\5u;\2\u00d0\u00d1\5u;\2\u00d1")
        buf.write("\u00d2\5y=\2\u00d2:\3\2\2\2\u00d3\u00d4\5y=\2\u00d4\u00d5")
        buf.write("\5u;\2\u00d5\u00d6\5u;\2\u00d6\u00d7\5a\61\2\u00d7<\3")
        buf.write("\2\2\2\u00d8\u00d9\5q9\2\u00d9\u00da\5m\67\2\u00da\u00db")
        buf.write("\5e\63\2\u00db\u00dc\5k\66\2\u00dc>\3\2\2\2\u00dd\u00de")
        buf.write("\5{>\2\u00de\u00df\5m\67\2\u00df\u00e0\5i\65\2\u00e0\u00e1")
        buf.write("\5a\61\2\u00e1\u00e2\5e\63\2\u00e2@\3\2\2\2\u00e3\u00e4")
        buf.write("\5_\60\2\u00e4\u00e5\5]/\2\u00e5\u00e6\5c\62\2\u00e6\u00e7")
        buf.write("\5e\63\2\u00e7B\3\2\2\2\u00e8\u00e9\5e\63\2\u00e9\u00ea")
        buf.write("\5c\62\2\u00ea\u00eb\5]/\2\u00eb\u00ec\5_\60\2\u00ecD")
        buf.write("\3\2\2\2\u00ed\u00ee\5k\66\2\u00ee\u00ef\5e\63\2\u00ef")
        buf.write("\u00f0\5{>\2\u00f0F\3\2\2\2\u00f1\u00f2\5u;\2\u00f2\u00f3")
        buf.write("\5g\64\2\u00f3H\3\2\2\2\u00f4\u00f5\5k\66\2\u00f5\u00f6")
        buf.write("\5u;\2\u00f6\u00f7\5q9\2\u00f7J\3\2\2\2\u00f8\u00f9\7")
        buf.write("v\2\2\u00f9\u00fa\7t\2\2\u00fa\u00fb\7w\2\2\u00fb\u00fc")
        buf.write("\7g\2\2\u00fcL\3\2\2\2\u00fd\u00fe\7h\2\2\u00fe\u00ff")
        buf.write("\7c\2\2\u00ff\u0100\7n\2\2\u0100\u0101\7u\2\2\u0101\u0102")
        buf.write("\7g\2\2\u0102N\3\2\2\2\u0103\u0107\t\2\2\2\u0104\u0106")
        buf.write("\t\3\2\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107")
        buf.write("\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108P\3\2\2\2\u0109")
        buf.write("\u0107\3\2\2\2\u010a\u010e\t\4\2\2\u010b\u010d\t\3\2\2")
        buf.write("\u010c\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3")
        buf.write("\2\2\2\u010e\u010f\3\2\2\2\u010fR\3\2\2\2\u0110\u010e")
        buf.write("\3\2\2\2\u0111\u0113\t\5\2\2\u0112\u0111\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115T\3\2\2\2\u0116\u011a\7$\2\2\u0117\u0119\13\2\2")
        buf.write("\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u011b")
        buf.write("\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011d\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011d\u011e\7$\2\2\u011eV\3\2\2\2\u011f")
        buf.write("\u0121\t\6\2\2\u0120\u011f\3\2\2\2\u0121\u0122\3\2\2\2")
        buf.write("\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0124\3")
        buf.write("\2\2\2\u0124\u0125\b,\2\2\u0125X\3\2\2\2\u0126\u0127\7")
        buf.write("*\2\2\u0127\u0128\7,\2\2\u0128\u012c\3\2\2\2\u0129\u012b")
        buf.write("\13\2\2\2\u012a\u0129\3\2\2\2\u012b\u012e\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u012f\3\2\2\2")
        buf.write("\u012e\u012c\3\2\2\2\u012f\u0130\7,\2\2\u0130\u0131\7")
        buf.write("+\2\2\u0131\u0132\3\2\2\2\u0132\u0133\b-\2\2\u0133Z\3")
        buf.write("\2\2\2\u0134\u0135\7/\2\2\u0135\u0136\7/\2\2\u0136\u013a")
        buf.write("\3\2\2\2\u0137\u0139\13\2\2\2\u0138\u0137\3\2\2\2\u0139")
        buf.write("\u013c\3\2\2\2\u013a\u013b\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013b\u013d\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u013e\7")
        buf.write("\f\2\2\u013e\u013f\3\2\2\2\u013f\u0140\b.\2\2\u0140\\")
        buf.write("\3\2\2\2\u0141\u0142\t\7\2\2\u0142^\3\2\2\2\u0143\u0144")
        buf.write("\t\b\2\2\u0144`\3\2\2\2\u0145\u0146\t\t\2\2\u0146b\3\2")
        buf.write("\2\2\u0147\u0148\t\n\2\2\u0148d\3\2\2\2\u0149\u014a\t")
        buf.write("\13\2\2\u014af\3\2\2\2\u014b\u014c\t\f\2\2\u014ch\3\2")
        buf.write("\2\2\u014d\u014e\t\r\2\2\u014ej\3\2\2\2\u014f\u0150\t")
        buf.write("\16\2\2\u0150l\3\2\2\2\u0151\u0152\t\17\2\2\u0152n\3\2")
        buf.write("\2\2\u0153\u0154\t\20\2\2\u0154p\3\2\2\2\u0155\u0156\t")
        buf.write("\21\2\2\u0156r\3\2\2\2\u0157\u0158\t\22\2\2\u0158t\3\2")
        buf.write("\2\2\u0159\u015a\t\23\2\2\u015av\3\2\2\2\u015b\u015c\t")
        buf.write("\24\2\2\u015cx\3\2\2\2\u015d\u015e\t\25\2\2\u015ez\3\2")
        buf.write("\2\2\u015f\u0160\t\26\2\2\u0160|\3\2\2\2\n\2\u0107\u010e")
        buf.write("\u0114\u011a\u0122\u012c\u013a\3\b\2\2")
        return buf.getvalue()


class CoolLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    KLASS = 20
    ELSE = 21
    FI = 22
    IF = 23
    IN = 24
    INHERITS = 25
    ISVOID = 26
    LET = 27
    LOOP = 28
    POOL = 29
    THEN = 30
    WHILE = 31
    CASE = 32
    ESAC = 33
    NEW = 34
    OF = 35
    NOT = 36
    TRUE = 37
    FALSE = 38
    TYPE = 39
    ID = 40
    INTEGER = 41
    STRING = 42
    WHITESPACE = 43
    COMMENT = 44
    LINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'<-'", "'@'", 
            "'.'", "'=>'", "'+'", "'-'", "'*'", "'/'", "'~'", "'<'", "'<='", 
            "'='", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "KLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", 
            "LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", "OF", 
            "NOT", "TRUE", "FALSE", "TYPE", "ID", "INTEGER", "STRING", "WHITESPACE", 
            "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "KLASS", 
                  "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", 
                  "LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", 
                  "OF", "NOT", "TRUE", "FALSE", "TYPE", "ID", "INTEGER", 
                  "STRING", "WHITESPACE", "COMMENT", "LINE_COMMENT", "A", 
                  "C", "L", "S", "E", "F", "I", "N", "H", "R", "T", "V", 
                  "O", "D", "P", "W" ]

    grammarFileName = "Cool.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


